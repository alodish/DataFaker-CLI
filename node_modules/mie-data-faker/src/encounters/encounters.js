import { faker } from '@faker-js/faker';
import moment from 'moment';


// use a randomly selected row from the appointments table to create encounters
export function createEncounters(appointments, stages, visitTypes) {

    const appointment = faker.helpers.arrayElement(appointments);

    return {
        pat_id: appointment.pat_id,
        apt_id: appointment.id,
        visit_type: faker.helpers.arrayElement(visitTypes),
        serv_date: moment(appointment.startdate).format('YYYY-MM-DD HH:mm'),
        discharge_date: moment(appointment.enddate).format('YYYY-MM-DD HH:mm'),
        comment: appointment.comment,
        chief_complaint: appointment.reason,
        location: appointment.location,
        closed: faker.datatype.number({min: 0, max: 5 > 1 ? 1 : 0}),
        deleted: faker.datatype.number({min: 0, max: 5}) > 1 ? 0 : 1,
        stage: faker.helpers.arrayElement(stages),
        user_id: appointment.user_id, // this probably doesn't makes sense
        create_date: moment(appointment.createdate).format('YYYY-MM-DD HH:mm'),
        interface: 'MIE DataFaker'

    // commented out fields are those found in the encounters table but are not currently used
        // doc_id | Probably a way to tie this in
        // primary_diagnois
        // diagnosis2
        // diagnosis3
        // diagnosis4
        // performing_user_id
        // performing_pat_id | not sure how this works
        // location_pat_id
        // service_code
        // priority
        // accident_date
        // accident_code
        // accident_location
        // injury_code
        // modified_date
        // account_number
        // pre_cert_id
        // ext_id
        // due_date

    };
};
